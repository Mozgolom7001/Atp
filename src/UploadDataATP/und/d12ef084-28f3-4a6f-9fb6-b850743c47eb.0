{3,
{46,0,0,0,0,1,0,1,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{1,1952a54f-35ad-4928-902f-df212ab38ca3,"ПриСохраненииДанныхВНастройкахНаСервере",1,0,1952a54f-35ad-4928-902f-df212ab38ca3,0,1},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{28,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаПередать",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{29,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаПередатьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},5,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{19,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаНастройкиСоединения",
{1,1,
{"ru","Настройки соединения"}
},
{1,1,
{"ru","Группа настройки соединения"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},1,0,0,1,
{1,0},0,0,3,3,2,0,1,2},4,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"СтрокаСоединения",1,0,
{1,0},
{1,0},
{2,
{1},
{0,8b8299ac-78bf-4081-8c48-68ee5180d108}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{2,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СтрокаСоединенияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{3,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтрокаСоединенияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{10,
{30,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"Декорация1",
{1,1,
{"ru","Нужно указать полную строку соединения с базой источником, Например Srvr=""SERVER"";ref=""BAZA"";"}
},
{1,0},1,0,0,2,2,
{3,0,
{16711680}
},
{7,2,60,
{-20},400,1,0,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},1,
{21,
{31,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"Декорация1КонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,2,
{1,
{1,1,
{"ru","Нужно указать полную строку соединения с базой источником, Например Srvr=""SERVER"";ref=""BAZA"";"}
},0},0,1,
{10,
{32,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Декорация1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,0,0,1,0,3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{4,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ЛогинБазыИсточника",1,0,
{1,0},
{1,0},
{2,
{1},
{0,e747bb8a-aff3-4c2b-9b2c-89336b153775}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{5,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЛогинБазыИсточникаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{6,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЛогинБазыИсточникаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{7,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ПарольБазыИсточника",1,0,
{1,0},
{1,0},
{2,
{1},
{0,903068d6-138b-4c8f-93e3-36108f616e66}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{8,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПарольБазыИсточникаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{9,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПарольБазыИсточникаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{20,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаНастройкиСоединенияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{24,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"Период",
{1,1,
{"ru","Период"}
},
{1,1,
{"ru","Период"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{13,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДатаНачала",1,0,
{1,0},
{1,0},
{2,
{1},
{0,18b2af5e-2ba2-4d03-ad1c-7076d2cf4864}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{14,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДатаНачалаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{15,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДатаНачалаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{16,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДатаОкончания",1,0,
{1,0},
{1,0},
{2,
{1},
{0,25439999-11d1-41d9-9bb7-bea1d341b2cc}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{17,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДатаОкончанияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{18,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДатаОкончанияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{25,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПериодРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{53,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаНастройкиПроведения",
{1,1,
{"ru","Настройки проведения"}
},
{1,1,
{"ru","Группа настройки проведения"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,2},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{55,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ПроводитьДокументы",1,0,
{1,0},
{1,0},
{2,
{1},
{0,a71d6f47-1cb6-489a-b4ed-0dc8bf54676d}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,1,0},1,
{21,
{56,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПроводитьДокументыКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{57,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПроводитьДокументыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{58,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ОтветственныйЗаРасчет",1,0,
{1,0},
{1,0},
{2,
{1},
{0,2ed158e6-8dfd-444c-bf53-126a556fd514}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{59,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ОтветственныйЗаРасчетКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{60,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ОтветственныйЗаРасчетРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{54,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаНастройкиПроведенияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{26,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаТипыДокументов",
{1,1,
{"ru","Типы документов"}
},
{1,1,
{"ru","Группа типы документов"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},1,0,0,1,
{1,0},0,0,3,3,2,0,1,0},7,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{21,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ВыгрузкаРемонтов",1,0,
{1,0},
{1,0},
{2,
{1},
{0,e261be8b-33a6-45a9-ad1c-1573fcc782d6}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,1,0},1,
{21,
{22,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВыгрузкаРемонтовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{23,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыгрузкаРемонтовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{33,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ВыгрузкаПростоевЗаСчетРаботодателя",1,0,
{1,0},
{1,0},
{2,
{1},
{0,c173080a-5acf-44c8-8a6f-cf4b014c9555}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,1,0},1,
{21,
{34,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВыгрузкаПростоевЗаСчетРаботодателяКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{35,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыгрузкаПростоевЗаСчетРаботодателяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{36,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ВыгрузкаОплатыВыходныхДней",1,0,
{1,0},
{1,0},
{2,
{1},
{0,6c00eea1-8adf-474b-9f3e-15f4fc9eb078}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,1,0},1,
{21,
{37,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВыгрузкаОплатыВыходныхДнейКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{38,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыгрузкаОплатыВыходныхДнейРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{39,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ВыгрузкаСверхурочных",1,0,
{1,0},
{1,0},
{2,
{1},
{0,0b5bc5cb-999d-4fe8-b441-feeec0fe9135}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,1,0},1,
{21,
{40,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВыгрузкаСверхурочныхКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{41,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыгрузкаСверхурочныхРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{45,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"Группа1",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,2},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{42,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ВыгрузкаОплатПоСреднему",1,0,
{1,0},
{1,0},
{2,
{1},
{0,d70b50f6-21c0-47eb-8803-3c8daca72564}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,1,0},1,
{21,
{43,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВыгрузкаОплатПоСреднемуКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{44,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыгрузкаОплатПоСреднемуРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{47,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ПерезаполнятьОплатыПоСреднему",1,0,
{1,0},
{1,0},
{2,
{1},
{0,2adc0579-0f62-403b-b056-d4bae6d8ab8d}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,1,0},1,
{21,
{48,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПерезаполнятьОплатыПоСреднемуКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{49,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПерезаполнятьОплатыПоСреднемуРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{50,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ПерезаполнятьОплатыПоСреднемуПочасовые",1,0,
{1,0},
{1,0},
{2,
{1},
{0,554ce3cf-b88f-4d7c-88bb-3e11f067f5c1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,1,0},1,
{21,
{51,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПерезаполнятьОплатыПоСреднемуПочасовыеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{52,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПерезаполнятьОплатыПоСреднемуПочасовыеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{46,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Группа1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{61,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ВыгрузкаИзмененныйТариф",1,0,
{1,0},
{1,0},
{2,
{1},
{0,fe6aa399-c0bb-4a37-8074-dd856fdf1c03}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,1,0},1,
{21,
{62,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВыгрузкаИзмененныйТарифКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{63,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыгрузкаИзмененныйТарифРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{64,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ВыгрузкаНочныеИВечерние",1,0,
{1,0},
{1,0},
{2,
{1},
{0,20e8b68b-c989-40aa-92c6-f4a37903209d}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,1,0},1,
{21,
{65,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВыгрузкаНочныеИВечерниеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{66,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыгрузкаНочныеИВечерниеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{27,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаТипыДокументовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{70,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаВедомостиНаВыплату",
{1,1,
{"ru","Группа ведомости на выплату"}
},
{1,1,
{"ru","Группа ведомости на выплату"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,2},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{67,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ПередатьВедомостиНаВыплату",1,0,
{1,0},
{1,0},
{2,
{1},
{0,bc6a3c26-8220-49e9-aa2b-7a8b4a567392}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,1,0},1,
{21,
{68,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПередатьВедомостиНаВыплатуКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{69,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПередатьВедомостиНаВыплатуРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{71,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаВедомостиНаВыплатуРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Передать(Команда)
	
	Соединение = ПолучитьСоединение(Объект.СтрокаСоединения, Объект.ЛогинБазыИсточника, Объект.ПарольБазыИсточника);
	
	Если Соединение <> Неопределено Тогда
		
		Если Объект.ВыгрузкаРемонтов Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Начало передачи документов о ремонтах"");
			ПередатьДокументыРемонты(Соединение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Окончание передачи документов о ремонтах"");
			
		КонецЕсли; 	
		
		
		Если Объект.ВыгрузкаПростоевЗаСчетРаботодателя Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Начало передачи документов о простоях за счет работодателя"");
			ПередатьДокументыПростоиЗаСчетРаботодателя(Соединение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Окончание передачи документов о простоях за счет работодателя"");
			
		КонецЕсли;
		
		Если Объект.ВыгрузкаОплатыВыходныхДней Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Начало передачи документов об оплате выходных"");
			ПередатьДокументыОплатыВыходных(Соединение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Окончание передачи документов об оплате выходных"");
			
		КонецЕсли;
		
		Если Объект.ВыгрузкаСверхурочных Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Начало передачи документов об оплате сверхурочных"");
			ПередатьДокументыОплатыСверхурочных(Соединение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Окончание передачи документов об оплате сверхурочных"");
			
		КонецЕсли; 
		
		Если Объект.ВыгрузкаОплатПоСреднему Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Начало передачи документов об оплате по среднему"");
			ПередатьДокументыОплатыПоСреднему(Соединение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Окончание передачи документов об оплате по среднему"");
			
		КонецЕсли;
		
		Если Объект.ВыгрузкаИзмененныйТариф Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Начало передачи документов об оплате по Измененному тарифу"");
			ПередатьДокументыИзменнныйТариф(Соединение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Окончание передачи документов об оплате по Измененному тарифу"");
			
		КонецЕсли;
		
		Если Объект.ВыгрузкаНочныеИВечерние Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Начало передачи документов об оплате ночных и вечерних часов"");
			ПередатьДокументыНочныеВечерние(Соединение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Окончание передачи документов об оплатеночных и вечерних часов"");
			
		КонецЕсли;
		
		Если Объект.ПередатьВедомостиНаВыплатуЗарплаты Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Начало передачи документов Ведомость на выплату ЗП"");
			ПередатьДокументыВедомостьНаВыплатуЗП(Соединение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Окончание передачи документов Ведомость на выплату ЗП"");
			
		КонецЕсли;
		
		Соединение = Неопределено;
		
		
	КонецЕсли; 
КонецПроцедуры

#Область ОплатаПоСреднему

// <Описание процедуры>
//
&НаКлиенте
Процедура ПередатьДокументыОплатыПоСреднему(Соединение)
	
	Запрос = Соединение.NewObject(""Запрос"");
	Запрос.Текст = ""ВЫБРАТЬ
	|	ОплатаПоСреднемуЗаработку.Ссылка
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднемуЗаработку
	|ГДЕ
	|	ОплатаПоСреднемуЗаработку.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания"";
	
	Запрос.УстановитьПараметр(""ДатаНачала"", Объект.ДатаНачала);
	Запрос.УстановитьПараметр(""ДатаОкончания"", Объект.ДатаОкончания);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ДанныеДляСервера = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СсылкаСОМ = Выборка.Ссылка;
		ДокументДанные = Новый Структура;
		
		ДокументДанные.Вставить(""Дата"", СсылкаСОМ.Date);
		ДокументДанные.Вставить(""Комментарий"", СсылкаСОМ.Комментарий);
		ДокументДанные.Вставить(""ПериодРегистрации"", СсылкаСОМ.ПериодРегистрации);
		ДокументДанные.Вставить(""Сотрудник"", СсылкаСОМ.Сотрудник.Код);
		ДокументДанные.Вставить(""ВидРасчета"", СсылкаСОМ.ВидРасчета.Код);
		ДокументДанные.Вставить(""ПроцентОплаты"", СсылкаСОМ.ПроцентОплаты);
		ДокументДанные.Вставить(""ДатаНачала"", СсылкаСОМ.ДатаНачала);
		ДокументДанные.Вставить(""ДатаОкончания"", СсылкаСОМ.ДатаОкончания);
		ДокументДанные.Вставить(""ОплачиватьЧасов"", СсылкаСОМ.ОплачиватьЧасов);
		ДокументДанные.Вставить(""СпособРегистрацииВремени"", Соединение.String(СсылкаСОМ.СпособРегистрацииВремени));
		ДокументДанные.Вставить(""ПериодРасчетаСреднегоЗаработкаНачало"", СсылкаСОМ.ПериодРасчетаСреднегоЗаработкаНачало);
		ДокументДанные.Вставить(""ПериодРасчетаСреднегоЗаработкаОкончание"", СсылкаСОМ.ПериодРасчетаСреднегоЗаработкаОкончание);
		
		МассивНачислений = Новый Массив;
		
		Начисления = СсылкаСОМ.Начисления;
		
		Для каждого СОМСтрокаНачислений Из Начисления Цикл
			
			СтрокаНачислений = Новый Структура;	
			
			СтрокаНачислений.Вставить(""ВидРасчета"", СОМСтрокаНачислений.ВидРасчета.Код);
			
			СтрокаНачислений.Вставить(""ДатаНачала"", СОМСтрокаНачислений.ДатаНачала);
			СтрокаНачислений.Вставить(""ДатаОкончания"", СОМСтрокаНачислений.ДатаОкончания);
			
			СтрокаНачислений.Вставить(""Результат"", СОМСтрокаНачислений.Результат);
			СтрокаНачислений.Вставить(""ОтработаноДней"", СОМСтрокаНачислений.ОтработаноДней);
			СтрокаНачислений.Вставить(""ОтработаноЧасов"", СОМСтрокаНачислений.ОтработаноЧасов);
			СтрокаНачислений.Вставить(""ДополнительныеДанные"", СОМСтрокаНачислений.ДополнительныеДанные);
			СтрокаНачислений.Вставить(""ОплаченоДнейЧасов"", СОМСтрокаНачислений.ОплаченоДнейЧасов);
			СтрокаНачислений.Вставить(""ПодразделениеОрганизации"", СОМСтрокаНачислений.ПодразделениеОрганизации.Код);
			СтрокаНачислений.Вставить(""НормаДней"", СОМСтрокаНачислений.НормаДней);
			СтрокаНачислений.Вставить(""НормаЧасов"", СОМСтрокаНачислений.НормаЧасов);
			
			
			МассивНачислений.Добавить(СтрокаНачислений);
			
		КонецЦикла;
		
		ДокументДанные.Вставить(""Начисления"", МассивНачислений);
		
		ДанныеДляСервера.Добавить(ДокументДанные);
	КонецЦикла; 	
	
	СоздатьИЗаполнитьДокументыОплатыПоСреднемуНаСервере(ДанныеДляСервера);
	
	
КонецПроцедуры // ПередатьДокументыОплатыСверхурочных()

// <Описание процедуры>
//
// Параметры:
//  Запрос	 - 	 - 
//
&НаСервере
Процедура СоздатьИЗаполнитьДокументыОплатыПоСреднемуНаСервере(ДанныеОтКлиента)
	
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	ВидРасчетаКоммандировка = ПланыВидовРасчета.Начисления.НайтиПоНаименованию(""79.Командировочные"");
	ПорядокОплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	ВидРасчетаОплатаПоСреднемуПочасовая = ПланыВидовРасчета.Начисления.НайтиПоКоду(""КВАЛ"");
	
	Для каждого ДанныеДокумента Из ДанныеОтКлиента Цикл
		Если ДанныеДокумента.ВидРасчета = ""00031"" Тогда //Командировка
			
			Сотрудник = Справочники.Сотрудники.НайтиПоКоду(ДанныеДокумента.Сотрудник);
			ФизЛицо = Сотрудник.ФизическоеЛицо;
			
			Запрос = Новый Запрос;
			Запрос.Текст = ""ВЫБРАТЬ
			|	Командировка.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.Командировка КАК Командировка
			|ГДЕ
			|	Командировка.Сотрудник = &Сотрудник
			|	И Командировка.ДатаНачала = &ДатаНачала"";
			Запрос.УстановитьПараметр(""Сотрудник"", Сотрудник);
			Запрос.УстановитьПараметр(""ДатаНачала"", ДанныеДокумента.ДатаНачала);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				
				НовыйДокумент = Документы.Командировка.СоздатьДокумент();
				
			ИначеЕсли Объект.ПерезаполнятьОплатыПоСреднемуКомандировки Тогда
				
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				
				НовыйДокумент = Выборка.Ссылка.ПолучитьОбъект();
			Иначе
				Продолжить;
				
			КонецЕсли; 
			
			НовыйДокумент.Дата = ДанныеДокумента.Дата;
			НовыйДокумент.Комментарий = ДанныеДокумента.Комментарий;
			НовыйДокумент.Организация = Организация;
			НовыйДокумент.ПериодРегистрации = ДанныеДокумента.ПериодРегистрации;
			НовыйДокумент.ВидРасчета = ВидРасчетаКоммандировка;
			НовыйДокумент.ВнутрисменнаяКомандировка = Ложь;
			НовыйДокумент.ДатаНачала = ДанныеДокумента.ДатаНачала;
			НовыйДокумент.ДатаОкончания = ДанныеДокумента.ДатаОкончания;
			НовыйДокумент.ПорядокВыплаты = ПорядокОплаты;
			НовыйДокумент.Сотрудник = Сотрудник;
			НовыйДокумент.ФизическоеЛицо = ФизЛицо;
			НовыйДокумент.ДатаКомандировки = ДанныеДокумента.ДатаНачала;
			НовыйДокумент.ПериодРасчетаСреднегоЗаработкаНачало = ДанныеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
			НовыйДокумент.ПериодРасчетаСреднегоЗаработкаОкончание = ДанныеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
			НовыйДокумент.ПланируемаяДатаВыплаты = КонецМесяца(ДанныеДокумента.ДатаНачала);
			НовыйДокумент.ИзменилисьТерриториальныеУсловия = Ложь;
			НовыйДокумент.НеВключатьПериодВЛьготныйСтажПФР = Ложь;
			НовыйДокумент.ДлительнаяКомандировка = Ложь;
			НовыйДокумент.ДатаНачалаСобытия = ДанныеДокумента.Датаначала;
			
			Для каждого СтрокаНачислений Из ДанныеДокумента.Начисления Цикл
				
				НовыйДокумент.Начисления.Очистить();
				
				НовыйДокумент.Показатели.Очистить();
				
				НоваяСтрока = НовыйДокумент.Начисления.Добавить();
				НоваяСтрока.Начисление = ВидРасчетаКоммандировка;
				НоваяСтрока.Сотрудник = Сотрудник;
				НоваяСтрока.Подразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(СтрокаНачислений.ПодразделениеОрганизации);
				НоваяСтрока.ВремяВЧасах = Истина;
				ГрафикиРаботыТЗ = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудник, ""ГрафикРаботы"", ДанныеДокумента.ДатаНачала);
				
				Если ГрафикиРаботыТЗ.Количество() > 0 Тогда
					
					ГрафикРаботы = ГрафикиРаботыТЗ[0].ГрафикРаботы;
					
				Иначе
					ГрафикРаботы = Справочники.ГрафикиРаботыСотрудников.ПустаяСсылка();
				КонецЕсли; 
				
				НоваяСтрока.ГрафикРаботы = ГрафикРаботы;
				НоваяСтрока.ПериодДействия = ДанныеДокумента.ПериодРегистрации;
				НоваяСтрока.ОбщийГрафик = ГрафикРаботы;
				НоваяСтрока.Результат = СтрокаНачислений.Результат;
				НоваяСтрока.ОтработаноДней = СтрокаНачислений.НормаДней;
				НоваяСтрока.ОтработаноЧасов = СтрокаНачислений.НормаЧасов;
				НоваяСтрока.ИдентификаторСтрокиВидаРасчета = НоваяСтрока.НомерСтроки;
				НоваяСтрока.ОплаченоДней = СтрокаНачислений.НормаДней;
				НоваяСтрока.ОплаченоЧасов = СтрокаНачислений.НормаЧасов;
				НоваяСтрока.ГрафикРаботыНорма  = ГрафикРаботы;
				НоваяСтрока.ДатаНачала = ДанныеДокумента.ДатаНачала;
				НоваяСтрока.ДатаОкончания = ДанныеДокумента.ДатаОкончания;
				
				НоваяСтрокаПоказатели = НовыйДокумент.Показатели.Добавить();
				НоваяСтрокаПоказатели.Значение = 1;
				НоваяСтрокаПоказатели.ИдентификаторСтрокиВидаРасчета = НоваяСтрока.ИдентификаторСтрокиВидаРасчета;
				НоваяСтрокаПоказатели.Показатель = Справочники.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСреднегоЗаработка;
				
				НоваяСтрокаПоказатели = НовыйДокумент.Показатели.Добавить();
				НоваяСтрокаПоказатели.Значение = СтрокаНачислений.ДополнительныеДанные;
				НоваяСтрокаПоказатели.ИдентификаторСтрокиВидаРасчета = НоваяСтрока.ИдентификаторСтрокиВидаРасчета;
				НоваяСтрокаПоказатели.Показатель = Справочники.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий;
				
				НовыйДокумент.Начислено = СтрокаНачислений.Результат;
				НовыйДокумент.СреднийЗаработок = СтрокаНачислений.ДополнительныеДанные;
			КонецЦикла; 
			
			НовыйДокумент.Записать();
		ИначеЕсли ДанныеДокумента.ВидРасчета = ""00ч31"" Тогда //Почасовая оплата по среднему
			
			Сотрудник = Справочники.Сотрудники.НайтиПоКоду(ДанныеДокумента.Сотрудник);
			ФизЛицо = Сотрудник.ФизическоеЛицо;
			
			Запрос = Новый Запрос;
			Запрос.Текст = ""ВЫБРАТЬ
			|	ОплатаПоСреднемуЗаработку.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднемуЗаработку
			|ГДЕ
			|	ОплатаПоСреднемуЗаработку.Сотрудник = &Сотрудник
			|	И ОплатаПоСреднемуЗаработку.ДатаНачала = &ДатаНачала"";
			Запрос.УстановитьПараметр(""Сотрудник"", Сотрудник);
			Запрос.УстановитьПараметр(""ДатаНачала"", ДанныеДокумента.ДатаНачала);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				
				НовыйДокумент = Документы.ОплатаПоСреднемуЗаработку.СоздатьДокумент();
				
			ИначеЕсли Объект.ПерезаполнятьОплатыПоСреднемуПочасовые Тогда
				
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				
				НовыйДокумент = Выборка.Ссылка.ПолучитьОбъект();
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
			НовыйДокумент.Дата = ДанныеДокумента.Дата;
			НовыйДокумент.ПериодРегистрации = ДанныеДокумента.ПериодРегистрации;
			НовыйДокумент.Организация = Организация;
			НовыйДокумент.Сотрудник = Сотрудник;
			НовыйДокумент.ФизическоеЛицо = ФизЛицо;
			НовыйДокумент.ВидВремени = Справочники.ВидыИспользованияРабочегоВремени.ПовышениеКвалификации;
			НовыйДокумент.ВнутрисменноеОтсутствие = Истина;
			НовыйДокумент.ВидРасчета = ВидРасчетаОплатаПоСреднемуПочасовая;
			НовыйДокумент.ДатаНачала = ДанныеДокумента.ДатаНачала;
			НовыйДокумент.ДатаОкончания = ДанныеДокумента.ДатаОкончания;
			НовыйДокумент.ДатаОтсутствия = ДанныеДокумента.ДатаНачала;
			НовыйДокумент.ОплачиватьЧасов = ДанныеДокумента.ОплачиватьЧасов;
			НовыйДокумент.ДатаНачалаСобытия = ДанныеДокумента.ДатаНачала;
			НовыйДокумент.ВидВремениЗамещаемый = Справочники.ВидыИспользованияРабочегоВремени.Явка;
			НовыйДокумент.ПериодРасчетаСреднегоЗаработкаНачало = ДанныеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
			НовыйДокумент.ПериодРасчетаСреднегоЗаработкаОкончание = ДанныеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
			//НовыйДокумент.СреднийЗаработок = 
			НовыйДокумент.ПланируемаяДатаВыплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Организация, ДанныеДокумента.Дата);
			НовыйДокумент.Ответственный = Пользователи.ТекущийПользователь();
			НовыйДокумент.Комментарий = "" === Создан автоматически "" + ДанныеДокумента.Комментарий +"" ==="";
			НовыйДокумент.ДоначислитьЗарплатуПриНеобходимости = Ложь;
			НовыйДокумент.ПорядокВыплаты = ПорядокОплаты;
			НовыйДокумент.ПроцентОплаты = 100;
			
			Для каждого СтрокаНачислений Из ДанныеДокумента.Начисления Цикл
				
				НовыйДокумент.Начисления.Очистить();
				
				НовыйДокумент.Показатели.Очистить();
				
				НоваяСтрока = НовыйДокумент.Начисления.Добавить();
				НоваяСтрока.Начисление = ВидРасчетаОплатаПоСреднемуПочасовая;
				НоваяСтрока.Сотрудник = Сотрудник;
				НоваяСтрока.Подразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(СтрокаНачислений.ПодразделениеОрганизации);
				НоваяСтрока.ВремяВЧасах = Истина;
				ГрафикиРаботыТЗ = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудник, ""ГрафикРаботы"", ДанныеДокумента.ДатаНачала);
				
				Если ГрафикиРаботыТЗ.Количество() > 0 Тогда
					
					ГрафикРаботы = ГрафикиРаботыТЗ[0].ГрафикРаботы;
					
				Иначе
					ГрафикРаботы = Справочники.ГрафикиРаботыСотрудников.ПустаяСсылка();
				КонецЕсли;          
				НоваяСтрока.ОтработаноЧасов = СтрокаНачислений.НормаЧасов;
				НоваяСтрока.ИдентификаторСтрокиВидаРасчета = НовыйДокумент.Начисления.Индекс(НоваяСтрока)+1;
				НоваяСтрока.ГрафикРаботы = ГрафикРаботы;
				НоваяСтрока.ФиксРасчет = Истина;
				НоваяСтрока.ГрафикРаботыНорма = ГрафикРаботы;
				НоваяСтрока.ПериодРегистрацииВремени = НачалоМесяца(ДанныеДокумента.Дата);
				Новаястрока.ОплаченоДней = СтрокаНачислений.НормаДней;
				Новаястрока.ОплаченоЧасов = СтрокаНачислений.НормаЧасов;
				НоваяСтрока.ПериодДействия = НачалоМесяца(ДанныеДокумента.Дата);
				НоваяСтрока.ОбщийГрафик = ГрафикРаботы;
				НоваяСтрока.ДатаНачала = ДанныеДокумента.ДатаНачала;
				НоваяСтрока.ДатаОкончания = ДанныеДокумента.ДатаОкончания;
				НоваяСтрока.Результат = СтрокаНачислений.Результат;
				
				НоваяСтрокаПоказатели = НовыйДокумент.Показатели.Добавить();
				НоваяСтрокаПоказатели.Значение = 1;
				НоваяСтрокаПоказатели.ИдентификаторСтрокиВидаРасчета = НоваяСтрока.ИдентификаторСтрокиВидаРасчета;
				НоваяСтрокаПоказатели.Показатель = Справочники.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСреднегоЗаработка;
				
				НоваяСтрокаПоказатели = НовыйДокумент.Показатели.Добавить();
				НоваяСтрокаПоказатели.Значение = 100;
				НоваяСтрокаПоказатели.ИдентификаторСтрокиВидаРасчета = НоваяСтрока.ИдентификаторСтрокиВидаРасчета;
				НоваяСтрокаПоказатели.Показатель = Справочники.ПоказателиРасчетаЗарплаты.ПроцентОплатыПоСреднему;
				
				НоваяСтрокаПоказатели = НовыйДокумент.Показатели.Добавить();
				НоваяСтрокаПоказатели.Значение = СтрокаНачислений.ДополнительныеДанные;
				НоваяСтрокаПоказатели.ИдентификаторСтрокиВидаРасчета = НоваяСтрока.ИдентификаторСтрокиВидаРасчета;
				НоваяСтрокаПоказатели.Показатель = Справочники.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий;
				
				НовыйДокумент.Начислено = СтрокаНачислений.Результат;
				НовыйДокумент.СреднийЗаработок = СтрокаНачислений.ДополнительныеДанные;
			КонецЦикла; 
			
			Если Объект.ПроводитьДокументы Тогда
				
				НовыйДокумент.Рассчитал = Объект.ОтветственныйЗаРасчет;
				НовыйДокумент.ДокументРассчитан = Истина;
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				
			Иначе
				
				НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли; 
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(""Для кода вида расчета "" + ДанныеДокумента.ВидРасчета + "" выгрузка не реализована"");
			
		КонецЕсли; 
		
		
		
	КонецЦикла;
КонецПроцедуры // СоздатьИЗаполнитьДокументыПростойСотрудниковНаСервере()

#КонецОбласти 

#Область ОплатаСверхурочных

// <Описание процедуры>
//
// Параметры:
//  Соединение	 - 	 - 
//
&НаКлиенте
Процедура ПередатьДокументыОплатыСверхурочных(Соединение)
	
	Запрос = Соединение.NewObject(""Запрос"");
	Запрос.Текст = ""ВЫБРАТЬ 
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации КАК ПериодРегистрации,
	|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец,
	|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник.Код КАК СотрудникКод,
	|	ОсновныеНачисленияРаботниковОрганизаций.Результат КАК Результат,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель1 КАК ТарифнаяСтавка,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель2 КАК ОплаченоЧасов,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.Код
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = &ВидРасчета
	|	И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодДействияНачало,
	|	СотрудникКод
	|ИТОГИ
	|	СУММА(Результат)
	|ПО
	|	ПериодРегистрации,
	|	СотрудникКод"";
	
	Запрос.УстановитьПараметр(""ДатаНачала"", Объект.ДатаНачала);
	Запрос.УстановитьПараметр(""ДатаОкончания"", Объект.ДатаОкончания);
	Запрос.УстановитьПараметр(""ВидРасчета"", Соединение.ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных);
	
	Результат = Запрос.Выполнить();
	ВыборкаПериод = Результат.Выбрать(Соединение.ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивДокументов = Новый Массив;
	Пока ВыборкаПериод.Следующий() Цикл
		
		ВыборкаСотрудникКод  = ВыборкаПериод.Выбрать(Соединение.ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСотрудникКод.Следующий() Цикл
			
			ДанныеДокумента = Новый Структура;
			
			ДанныеДокумента.Вставить(""Период"", ВыборкаСотрудникКод.ПериодРегистрации);
			МассивСтрок = Новый Массив;
			Пока ВыборкаСотрудникКод.Следующий() Цикл
				
				СтруктураСтроки = Новый Структура;
				
				СтруктураСтроки.Вставить(""СотрудникКод"", ВыборкаСотрудникКод.СотрудникКод);
				СтруктураСтроки.Вставить(""СуммаОплаты"", ВыборкаСотрудникКод.Результат);
				
				МассивСтрок.Добавить(СтруктураСтроки);
				
			КонецЦикла;
			
			ДанныеДокумента.Вставить(""МассивНачислений"", МассивСтрок);
			
			
		КонецЦикла; 
		МассивДокументов.Добавить(ДанныеДокумента);
		
	КонецЦикла;
	
	
	СоздатьИЗаполнитьДокументыСверхурочныеНаСервере(МассивДокументов);
	
	
КонецПроцедуры // ПередатьДокументыОплатыСверхурочных()

// <Описание процедуры>
//
// Параметры:
//  Запрос	 - 	 - 
//
&НаСервере
Процедура СоздатьИЗаполнитьДокументыСверхурочныеНаСервере(ДанныеДляЗаполнения)
	
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	Для каждого ДанныеДокумента Из ДанныеДляЗаполнения Цикл
		
		ДокументРазовоеНачисление = Документы.РазовоеНачисление.СоздатьДокумент();
		
		ДокументРазовоеНачисление.Дата = КонецМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ДатаНачала = НачалоМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ДатаОкончания = КонецМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ДоначислитьЗарплатуПриНеобходимости = Ложь;
		ДокументРазовоеНачисление.Комментарий = ""=== Документ создан автоматически. Работа сверхурочно ==="";
		ДокументРазовоеНачисление.МесяцНачисления = НачалоМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.Начисление = ПланыВидовРасчета.Начисления.НайтиПоКоду(""СВРХУ"");
		ДокументРазовоеНачисление.Организация = Организация;
		ДокументРазовоеНачисление.Ответственный = Пользователи.ТекущийПользователь();
		ДокументРазовоеНачисление.ПланируемаяДатаВыплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Организация, ДанныеДокумента.Период);
		
		ДокументРазовоеНачисление.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		
		Для каждого СтрокаМассиваНачислений Из ДанныеДокумента.МассивНачислений Цикл
			
			СтрокаНачислений = ДокументРазовоеНачисление.Начисления.Добавить();
			Сотрудник = Справочники.Сотрудники.НайтиПоКоду(СтрокаМассиваНачислений.СотрудникКод);
			
			ДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, ""ГрафикРаботы, Подразделение"", КонецМесяца(ДанныеДокумента.Период));
			
			СтрокаНачислений.ГрафикРаботы = ДанныеСотрудника[0].ГрафикРаботы;
			СтрокаНачислений.ГрафикРаботыНорма = ДанныеСотрудника[0].ГрафикРаботы;
			СтрокаНачислений.ДатаНачала = НачалоМесяца(ДанныеДокумента.Период);
			СтрокаНачислений.ДатаОкончания = КонецМесяца(ДанныеДокумента.Период);
			СтрокаНачислений.ИдентификаторСтрокиВидаРасчета = ДокументРазовоеНачисление.Начисления.Индекс(СтрокаНачислений);
			СтрокаНачислений.ОбщийГрафик = ДанныеСотрудника[0].ГрафикРаботы;
			СтрокаНачислений.ПериодДействия = НачалоМесяца(ДанныеДокумента.Период);
			СтрокаНачислений.Подразделение = ДанныеСотрудника[0].Подразделение;
			СтрокаНачислений.Результат = СтрокаМассиваНачислений.СуммаОплаты;
			СтрокаНачислений.Сотрудник = Сотрудник;
			
		КонецЦикла;
		
		ДокументРазовоеНачисление.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
КонецПроцедуры // СоздатьИЗаполнитьДокументыПростойСотрудниковНаСервере()

#КонецОбласти 

#Область ОплатаВыходных	

// <Описание процедуры>
//
// Параметры:
//  Соединение	 - 	 - 
//
&НаКлиенте
Процедура ПередатьДокументыОплатыВыходных(Соединение)
	
	Запрос = Соединение.NewObject(""Запрос"");
	ТекстЗапроса = ""ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации КАК ПериодРегистрации,
	|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец,
	|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник.Код КАК СотрудникКод,
	|	ОсновныеНачисленияРаботниковОрганизаций.Результат КАК Результат,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель1 КАК ТарифнаяСтавка,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель2 КАК ОплаченоЧасов,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.Код
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета В (&ВидРасчета)
	|	И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодДействияНачало,
	|	СотрудникКод
	|ИТОГИ
	|	СУММА(Результат)
	|ПО
	|	ПериодРегистрации,
	|	ВидРасчета,
	|	СотрудникКод"";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр(""ДатаНачала"", Объект.ДатаНачала);
	Запрос.УстановитьПараметр(""ДатаОкончания"", Объект.ДатаОкончания);
	ВидРасчетаВыходные = Соединение.NewObject(""Массив"");
	
	ВидРасчетаВыходные.Добавить(Соединение.ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаПраздничныеИВыходные);
	ВидРасчетаВыходные.Добавить(Соединение.ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПраздничныхИВыходных);
	
	Запрос.УстановитьПараметр(""ВидРасчета"", ВидРасчетаВыходные);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПериод = Результат.Выбрать(Соединение.ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивДанныхДляДокументов = Новый Массив;
	
	Пока ВыборкаПериод.Следующий() Цикл
		
		ВыборкаВидРасчета = ВыборкаПериод.Выбрать(Соединение.ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВидРасчета.Следующий() Цикл
			
			ДанныеДокумента = Новый Структура;
			ДанныеДокумента.Вставить(""Период"", ВыборкаПериод.ПериодРегистрации);
			ДанныеДокумента.Вставить(""Оплата"", ВыборкаВидРасчета.ВидРасчета.Код = ""00012"");
			
			ВыборкаСотрудникКод = ВыборкаВидРасчета.Выбрать(Соединение.ОбходРезультатаЗапроса.ПоГруппировкам);
			
			МассивСтрок = Новый Массив;
			Пока ВыборкаСотрудникКод.Следующий(Соединение.ОбходРезультатаЗапроса.ПоГруппировкам) Цикл
				
				СтруктураСтроки = Новый Структура;
				
				СтруктураСтроки.Вставить(""СотрудникКод"", ВыборкаСотрудникКод.СотрудникКод);
				СтруктураСтроки.Вставить(""СуммаОплаты"", ВыборкаСотрудникКод.Результат);
				
				МассивСтрок.Добавить(СтруктураСтроки);
				
			КонецЦикла; 
			ДанныеДокумента.Вставить(""МассивНачислений"", МассивСтрок);
			
			МассивДанныхДляДокументов.Добавить(ДанныеДокумента);
		КонецЦикла;
		
	КонецЦикла; 	
	
	СоздатьИЗаполнитьДокументыОплатыВыходныхНаСервере(МассивДанныхДляДокументов);
	
КонецПроцедуры // ПередатьДокументыОплатыВыходных()

// <Описание процедуры>
//
// Параметры:
//  ДанныеОтКлиента	 - 	 - 
//
&НаСервере
Процедура СоздатьИЗаполнитьДокументыОплатыВыходныхНаСервере(ДанныеДляЗаполнения)
	
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	Для каждого ДанныеДокумента Из ДанныеДляЗаполнения Цикл
		
		ДокументРазовоеНачисление = Документы.РазовоеНачисление.СоздатьДокумент();
		
		ДокументРазовоеНачисление.Дата = КонецМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ДатаНачала = НачалоМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ДатаОкончания = КонецМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ДоначислитьЗарплатуПриНеобходимости = Ложь;
		Если ДанныеДокумента.Оплата Тогда
			
			ДокументРазовоеНачисление.Комментарий = ""=== Документ создан автоматически. Работа в выходные и праздники. Оплата ==="";
			ДокументРазовоеНачисление.Начисление = ПланыВидовРасчета.Начисления.НайтиПоКоду(""ВЫХВ"");
		Иначе
			
			ДокументРазовоеНачисление.Комментарий = ""=== Документ создан автоматически. Работа в выходные и праздники. Доплата ==="";
			ДокументРазовоеНачисление.Начисление = ПланыВидовРасчета.Начисления.НайтиПоКоду(""ДВЫХВ"");
			
		КонецЕсли; 
		
		ДокументРазовоеНачисление.МесяцНачисления = НачалоМесяца(ДанныеДокумента.Период);
		
		
		ДокументРазовоеНачисление.Организация = Организация;
		ДокументРазовоеНачисление.Ответственный = Пользователи.ТекущийПользователь();
		ДокументРазовоеНачисление.ПланируемаяДатаВыплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Организация, ДанныеДокумента.Период);
		
		ДокументРазовоеНачисление.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		
		Для каждого СтрокаМассиваНачислений Из ДанныеДокумента.МассивНачислений Цикл
			
			СтрокаНачислений = ДокументРазовоеНачисление.Начисления.Добавить();
			Сотрудник = Справочники.Сотрудники.НайтиПоКоду(СтрокаМассиваНачислений.СотрудникКод);
			
			ДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, ""ГрафикРаботы, Подразделение"", КонецМесяца(ДанныеДокумента.Период));
			Если ДанныеСотрудника.Количество() = 0 Тогда
				
				ДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, ""ГрафикРаботы, Подразделение"", НачалоМесяца(ДанныеДокумента.Период));
				
				Если ДанныеСотрудника.Количество() = 0 Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(""Для сотрудника "" + 
					Сотрудник.Наименование + "" не удалось получить график работы и подразделение. Перезаполните сотрудника в документе"") ;
					ДанныеСотрудника.Добавить();		
				КонецЕсли; 
				
			КонецЕсли; 
			
			СтрокаНачислений.ГрафикРаботы = ДанныеСотрудника[0].ГрафикРаботы;
			СтрокаНачислений.ГрафикРаботыНорма = ДанныеСотрудника[0].ГрафикРаботы;
			СтрокаНачислений.ДатаНачала = НачалоМесяца(ДанныеДокумента.Период);
			СтрокаНачислений.ДатаОкончания = КонецМесяца(ДанныеДокумента.Период);
			СтрокаНачислений.ИдентификаторСтрокиВидаРасчета = ДокументРазовоеНачисление.Начисления.Индекс(СтрокаНачислений);
			СтрокаНачислений.ОбщийГрафик = ДанныеСотрудника[0].ГрафикРаботы;
			СтрокаНачислений.ПериодДействия = НачалоМесяца(ДанныеДокумента.Период);
			СтрокаНачислений.Подразделение = ДанныеСотрудника[0].Подразделение;
			СтрокаНачислений.Результат = СтрокаМассиваНачислений.СуммаОплаты;
			СтрокаНачислений.Сотрудник = Сотрудник;
			
		КонецЦикла;
		
		МассивДокументовДляПроведения = Новый Массив;
		ДокументРазовоеНачисление.Записать(РежимЗаписиДокумента.Запись);
		
		Если Объект.ПроводитьДокументы Тогда
			
			МассивДокументовДляПроведения.Добавить(ДокументРазовоеНачисление.Ссылка);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если МассивДокументовДляПроведения.Количество() > 0 Тогда
		
		Для каждого СсылкаДок Из МассивДокументовДляПроведения Цикл
			
			ОбъектДок = СсылкаДок.ПолучитьОбъект();
			
			Попытка
				
				ОбъектДок.Записать(РежимЗаписиДокумента.Проведение);
				
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(""Не удалось провести документ "" +
				СсылкаДок + "". "" + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры // СоздатьИЗаполнитьДокументыОплатыВыходныхНаСервере()
#КонецОбласти 

#Область Простои	

// <Описание процедуры>
//
&НаКлиенте
Процедура ПередатьДокументыПростоиЗаСчетРаботодателя(Соединение)
	
	Запрос = Соединение.NewObject(""Запрос"");
	ТекстЗапроса = ""ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало КАК ПДН,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец КАК ПДК,
	|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник.Код КАК СотрудникКод,
	|	ОсновныеНачисленияРаботниковОрганизаций.Результат КАК Сумма,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель1 КАК ПроцентСреднего,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.Код КАК ПодразделениеКод,
	|	ОсновныеНачисленияРаботниковОрганизаций.ДополнительныеДанные КАК СреднийЗаработок,
	|	ОсновныеНачисленияРаботниковОрганизаций.ОплаченоДнейЧасов КАК ОплаченоЧасов,
	|	ОсновныеНачисленияРаботниковОрганизаций.ГрафикРаботыНорма.Наименование
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПочасовойПростойПоВинеРаботодателя)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникКод,
	|	ПДН"";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр(""ДатаНачала"", Объект.ДатаНачала);
	Запрос.УстановитьПараметр(""ДатаОкончания"", Объект.ДатаОкончания);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ДанныеДляСервера = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить(""ДатаПростоя"", Выборка.ПДН);
		СтруктураДокумента.Вставить(""ЧасыПростоя"", Выборка.ОплаченоЧасов);
		СтруктураДокумента.Вставить(""Подразделение"", Выборка.ПодразделениеКод);
		
		СтруктураСтрокиТЧ = Новый Структура;
		СтруктураСтрокиТЧ.Вставить(""Сотрудник"", Выборка.СотрудникКод);
		СтруктураСтрокиТЧ.Вставить(""Подразделение"", Выборка.ПодразделениеКод);
		СтруктураСтрокиТЧ.Вставить(""Результат"", Выборка.Сумма);
		СтруктураСтрокиТЧ.Вставить(""ОтработаноЧасов"", Выборка.ОплаченоЧасов);
		СтруктураСтрокиТЧ.Вставить(""ОплаченоЧасов"", Выборка.ОплаченоЧасов);
		//СтруктураСтрокиТЧ.Вставить(""ОплаченоЧасов"", Выборка.ОплаченоЧасов);
		СтруктураСтрокиТЧ.Вставить(""ГрафикРаботы"", Выборка.ГрафикРаботыНормаНаименование);
		СтруктураСтрокиТЧ.Вставить(""СреднийЗаработок"", Выборка.СреднийЗаработок);
		
		СтруктураДокумента.Вставить(""Начисления"", СтруктураСтрокиТЧ);
		
		ДанныеДляСервера.Добавить(СтруктураДокумента);
		
	КонецЦикла; 
	
	СоздатьИЗаполнитьДокументыПростойСотрудниковНаСервере(ДанныеДляСервера);
	
КонецПроцедуры // ПередатьДокументыПростоиЗаСчетРаботодателя()

// <Описание процедуры>
//
// Параметры:
//  Запрос	 - 	 - 
//
&НаСервере
Процедура СоздатьИЗаполнитьДокументыПростойСотрудниковНаСервере(ДанныеОтКлиента)
	
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	ВидУчетаВремени = Справочники.ВидыИспользованияРабочегоВремени.ПростойПоВинеРаботодателя;
	ВидПростоя = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботодателя;
	ВнутрисменныйПростой = Истина;
	Начисление = ПланыВидовРасчета.Начисления.НайтиПоКоду(""ПРСРЧ""); // Оплата часового простоя по среднему заработку
	ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	УдалитьВидПростоя = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя;
	СреднийЗаработокПоказатель = Справочники.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий;
	
	Для каждого ДанныеЗаполнения Из ДанныеОтКлиента Цикл
		
		НовДокумент = Документы.ПростойСотрудников.СоздатьДокумент();
		
		НовДокумент.Дата = ДанныеЗаполнения.ДатаПростоя;
		
		НовДокумент.УдалитьВидПростоя = УдалитьВидПростоя;
		НовДокумент.ПериодРегистрации = НачалоМесяца(ДанныеЗаполнения.ДатаПростоя);
		НовДокумент.Организация = Организация;
		НовДокумент.Подразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(ДанныеЗаполнения.Подразделение);
		НовДокумент.ВидПростоя = ВидПростоя;
		НовДокумент.ВнутрисменныйПростой = ВнутрисменныйПростой;
		НовДокумент.Начисление = Начисление;
		НовДокумент.ДатаНачала = ДанныеЗаполнения.ДатаПростоя;
		НовДокумент.ДатаОкончания = ДанныеЗаполнения.ДатаПростоя;
		НовДокумент.ДатаПростоя = ДанныеЗаполнения.ДатаПростоя;
		НовДокумент.ЧасыПростоя = ДанныеЗаполнения.ЧасыПростоя;
		НовДокумент.ПорядокВыплаты = ПорядокВыплаты;
		НовДокумент.Комментарий = ""==Созданно автоматически при загрузке данных из ранней версии ЗУП=="";
		НовДокумент.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
		
		НовДокумент.ВидВремениЗамещаемый = Справочники.ВидыИспользованияРабочегоВремени.Явка;
		
		//НастройкиПолученияДатыВыплаты = Новый Структура;
		//НастройкиПолученияДатыВыплаты.Вставить(""ВыплачиватьЗарплатуВПоследнийДеньМесяца"", Ложь);
		//НастройкиПолученияДатыВыплаты.Вставить(""ДатаВыплатыЗарплатыНеПозжеЧем"", 5);
		
		ДатаВыплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Организация, НовДокумент.ПериодРегистрации);
		НовДокумент.ПланируемаяДатаВыплаты = ДатаВыплаты;
		
		
		НачисленияПолученные = ДанныеЗаполнения.Начисления;
		
		НовСтрокаНачислений = НовДокумент.Начисления.Добавить();
		
		НовСтрокаНачислений.ВидУчетаВремени = ВидУчетаВремени;
		НовСтрокаНачислений.ВремяВЧасах = НачисленияПолученные.ОплаченоЧасов;
		НовСтрокаНачислений.Сотрудник = Справочники.Сотрудники.НайтиПоКоду(НачисленияПолученные.Сотрудник);
		НовСтрокаНачислений.Результат = НачисленияПолученные.Результат;
		НовСтрокаНачислений.ОплаченоДней = 1;
		НовСтрокаНачислений.ФиксСтрока = Истина;
		НовСтрокаНачислений.ВремяВЧасах = Истина;
		НовСтрокаНачислений.ПериодРегистрацииВремени = НачалоМесяца(ДанныеЗаполнения.ДатаПростоя);
		НовСтрокаНачислений.ГрафикРаботыНорма = Справочники.ГрафикиРаботыСотрудников.НайтиПоНаименованию(НачисленияПолученные.ГрафикРаботы);
		
		НовСтрокаНачислений.ОплаченоЧасов = НачисленияПолученные.ОплаченоЧасов;
		НовСтрокаНачислений.ДатаНачала = ДанныеЗаполнения.ДатаПростоя;
		НовСтрокаНачислений.ДатаОкончания = ДанныеЗаполнения.ДатаПростоя;
		НовСтрокаНачислений.ОтработаноДней = 0;
		НовСтрокаНачислений.ОтработаноЧасов = НачисленияПолученные.ОплаченоЧасов;
		НовСтрокаНачислений.ИдентификаторСтрокиВидаРасчета = 1;
		НовСтрокаНачислений.ПериодДействия = НачалоМесяца(ДанныеЗаполнения.ДатаПростоя);
		НовСтрокаНачислений.ОбщийГрафик = Справочники.ГрафикиРаботыСотрудников.НайтиПоНаименованию(НачисленияПолученные.ГрафикРаботы);
		НовСтрокаНачислений.ПериодРегистрацииНормыВремени = Дата(1,1,1);
		
		НовСтрокаПоказатели = НовДокумент.Показатели.Добавить();
		НовСтрокаПоказатели.ИдентификаторСтрокиВидаРасчета = 1;
		НовСтрокаПоказатели.Значение = НачисленияПолученные.СреднийЗаработок;
		НовСтрокаПоказатели.Показатель = СреднийЗаработокПоказатель;
		
		НовДокумент.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла; 
	
	
	
КонецПроцедуры // СоздатьИЗаполнитьДокументыПростойСотрудниковНаСервере()

#КонецОбласти

#Область Ремонты


// <Описание процедуры>
//
// Параметры:
//  Соединение	 - 	 - 
//
&НаКлиенте
Процедура ПередатьДокументыРемонты(Соединение)
	
	Запрос = Соединение.NewObject(""Запрос"");
	ТекстЗапроса = ""ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации КАК ПериодРегистрации,
	|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец,
	|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник.Код КАК СотрудникКод,
	|	ОсновныеНачисленияРаботниковОрганизаций.Результат КАК Результат,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель1 КАК ТарифнаяСтавка,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель2 КАК ОплаченоЧасов,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.Код
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = &ВидРасчета
	|	И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодДействияНачало,
	|	СотрудникКод
	|ИТОГИ
	|	СУММА(Результат)
	|ПО
	|	ПериодРегистрации,
	|	СотрудникКод"";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр(""ДатаНачала"", Объект.ДатаНачала);
	Запрос.УстановитьПараметр(""ДатаОкончания"", Объект.ДатаОкончания);
	ВидРасчетаРемонт = Соединение.ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоКоду(""вц002"");
	
	Запрос.УстановитьПараметр(""ВидРасчета"", ВидРасчетаРемонт);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПериод = Результат.Выбрать(Соединение.ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивДанныхДляДокументов = Новый Массив;
	
	Пока ВыборкаПериод.Следующий() Цикл
		
		ВыборкаСотрудникКод = ВыборкаПериод.Выбрать(Соединение.ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ДанныеДокумента = Новый Структура;
		ДанныеДокумента.Вставить(""Период"", ВыборкаПериод.ПериодРегистрации);
		
		МассивСтрок = Новый Массив;
		Пока ВыборкаСотрудникКод.Следующий() Цикл
			
			СтруктураСтроки = Новый Структура;
			
			СтруктураСтроки.Вставить(""СотрудникКод"", ВыборкаСотрудникКод.СотрудникКод);
			СтруктураСтроки.Вставить(""СуммаОплаты"", ВыборкаСотрудникКод.Результат);
			
			МассивСтрок.Добавить(СтруктураСтроки);
			
		КонецЦикла; 
		ДанныеДокумента.Вставить(""МассивНачислений"", МассивСтрок);
		
		МассивДанныхДляДокументов.Добавить(ДанныеДокумента);
	КонецЦикла; 
	
	СоздатьИЗаполнитьДокументРемонтыНаСервере(МассивДанныхДляДокументов);
	
	
КонецПроцедуры // ПередатьДокументыРемонты()

// <Описание процедуры>
//
// Параметры:
//  ДанныеДляЗаполнения	 - 	 - 
//
&НаСервере
Процедура СоздатьИЗаполнитьДокументРемонтыНаСервере(ДанныеДляЗаполнения)
	
	Для каждого ДанныеДокумента Из ДанныеДляЗаполнения Цикл
		
		ДокументРазовоеНачисление = Документы.РазовоеНачисление.СоздатьДокумент();
		
		ДокументРазовоеНачисление.Дата = КонецМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ДатаНачала = НачалоМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ДатаОкончания = КонецМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ДоначислитьЗарплатуПриНеобходимости = Ложь;
		ДокументРазовоеНачисление.Комментарий = ""=== Документ создан автоматически ==="";
		ДокументРазовоеНачисление.МесяцНачисления = НачалоМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.Начисление = ПланыВидовРасчета.Начисления.НайтиПоКоду(""РЕМВ"");
		ДокументРазовоеНачисление.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		ДокументРазовоеНачисление.Ответственный = Пользователи.ТекущийПользователь();
		ДокументРазовоеНачисление.ПланируемаяДатаВыплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(ДокументРазовоеНачисление.Организация, ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		
		Для каждого СтрокаМассиваНачислений Из ДанныеДокумента.МассивНачислений Цикл
			
			СтрокаНачислений = ДокументРазовоеНачисление.Начисления.Добавить();
			Сотрудник = Справочники.Сотрудники.НайтиПоКоду(СтрокаМассиваНачислений.СотрудникКод);
			
			ДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, ""ГрафикРаботы, Подразделение"", КонецМесяца(ДанныеДокумента.Период));
			
			СтрокаНачислений.ГрафикРаботы = ДанныеСотрудника[0].ГрафикРаботы;
			СтрокаНачислений.ГрафикРаботыНорма = ДанныеСотрудника[0].ГрафикРаботы;
			СтрокаНачислений.ДатаНачала = НачалоМесяца(ДанныеДокумента.Период);
			СтрокаНачислений.ДатаОкончания = КонецМесяца(ДанныеДокумента.Период);
			СтрокаНачислений.ИдентификаторСтрокиВидаРасчета = ДокументРазовоеНачисление.Начисления.Индекс(СтрокаНачислений);
			СтрокаНачислений.ОбщийГрафик = ДанныеСотрудника[0].ГрафикРаботы;
			СтрокаНачислений.ПериодДействия = НачалоМесяца(ДанныеДокумента.Период);
			СтрокаНачислений.Подразделение = ДанныеСотрудника[0].Подразделение;
			СтрокаНачислений.Результат = СтрокаМассиваНачислений.СуммаОплаты;
			СтрокаНачислений.Сотрудник = Сотрудник;
			
		КонецЦикла;
		
		ДокументРазовоеНачисление.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла; 
	
КонецПроцедуры // СоздатьИЗаполнитьДокументНаСервере()
#КонецОбласти

#Область ИзмененныйТариф


// <Описание процедуры>
//
// Параметры:
//  Соединение	 - 	 - 
//
&НаКлиенте
Процедура ПередатьДокументыИзменнныйТариф(Соединение)
	
	Запрос = Соединение.NewObject(""Запрос"");
	ТекстЗапроса = ""ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации КАК ПериодРегистрации,
	|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец,
	|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник.Код КАК СотрудникКод,
	|	ОсновныеНачисленияРаботниковОрганизаций.Результат КАК Результат,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель1 КАК ТарифнаяСтавка,
	|	ОсновныеНачисленияРаботниковОрганизаций.Показатель2 КАК ОплаченоЧасов,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.Код
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = &ВидРасчета
	|	И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодДействияНачало,
	|	СотрудникКод
	|ИТОГИ
	|	СУММА(Результат)
	|ПО
	|	ПериодРегистрации,
	|	СотрудникКод"";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр(""ДатаНачала"", Объект.ДатаНачала);
	Запрос.УстановитьПараметр(""ДатаОкончания"", Объект.ДатаОкончания);
	ВидРасчетаРемонт = Соединение.ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоКоду(""вц003"");
	
	Запрос.УстановитьПараметр(""ВидРасчета"", ВидРасчетаРемонт);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПериод = Результат.Выбрать(Соединение.ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивДанныхДляДокументов = Новый Массив;
	
	Пока ВыборкаПериод.Следующий() Цикл
		
		ВыборкаСотрудникКод = ВыборкаПериод.Выбрать(Соединение.ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ДанныеДокумента = Новый Структура;
		ДанныеДокумента.Вставить(""Период"", ВыборкаПериод.ПериодРегистрации);
		
		МассивСтрок = Новый Массив;
		Пока ВыборкаСотрудникКод.Следующий() Цикл
			
			СтруктураСтроки = Новый Структура;
			
			СтруктураСтроки.Вставить(""СотрудникКод"", ВыборкаСотрудникКод.СотрудникКод);
			СтруктураСтроки.Вставить(""СуммаОплаты"", ВыборкаСотрудникКод.Результат);
			
			МассивСтрок.Добавить(СтруктураСтроки);
			
		КонецЦикла; 
		ДанныеДокумента.Вставить(""МассивНачислений"", МассивСтрок);
		
		МассивДанныхДляДокументов.Добавить(ДанныеДокумента);
	КонецЦикла; 
	
	СоздатьИЗаполнитьДокументИзмененныйТарифНаСервере(МассивДанныхДляДокументов);
	
	
КонецПроцедуры // ПередатьДокументыРемонты()

// <Описание процедуры>
//
// Параметры:
//  ДанныеДляЗаполнения	 - 	 - 
//
&НаСервере
Процедура СоздатьИЗаполнитьДокументИзмененныйТарифНаСервере(ДанныеДляЗаполнения)
	
	Для каждого ДанныеДокумента Из ДанныеДляЗаполнения Цикл
		
		ДокументРазовоеНачисление = Документы.РазовоеНачисление.СоздатьДокумент();
		
		ДокументРазовоеНачисление.Дата = КонецМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ДатаНачала = НачалоМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ДатаОкончания = КонецМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ДоначислитьЗарплатуПриНеобходимости = Ложь;
		ДокументРазовоеНачисление.Комментарий = ""=== Документ создан автоматически. Оплата по измененному тарифу ==="";
		ДокументРазовоеНачисление.МесяцНачисления = НачалоМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.Начисление = ПланыВидовРасчета.Начисления.НайтиПоКоду(""ИЗМТ"");
		ДокументРазовоеНачисление.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		ДокументРазовоеНачисление.Ответственный = Пользователи.ТекущийПользователь();
		ДокументРазовоеНачисление.ПланируемаяДатаВыплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(ДокументРазовоеНачисление.Организация, ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		
		Для каждого СтрокаМассиваНачислений Из ДанныеДокумента.МассивНачислений Цикл
			
			СтрокаНачислений = ДокументРазовоеНачисление.Начисления.Добавить();
			Сотрудник = Справочники.Сотрудники.НайтиПоКоду(СтрокаМассиваНачислений.СотрудникКод);
			
			ДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, ""ГрафикРаботы, Подразделение"", КонецМесяца(ДанныеДокумента.Период));
			Если ДанныеСотрудника.Количество() = 0 Тогда
				
				ДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, ""ГрафикРаботы, Подразделение"", НачалоМесяца(ДанныеДокумента.Период));
				
				Если ДанныеСотрудника.Количество() = 0 Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(""Для сотрудника "" + 
					Сотрудник.Код + "" не удалось получить график работы и подразделение. Перезаполните сотрудника в документе"") ;
					ДанныеСотрудника.Добавить();		
				КонецЕсли; 
				
			КонецЕсли;
			
			СтрокаНачислений.ГрафикРаботы = ДанныеСотрудника[0].ГрафикРаботы;
			СтрокаНачислений.ГрафикРаботыНорма = ДанныеСотрудника[0].ГрафикРаботы;
			СтрокаНачислений.ДатаНачала = НачалоМесяца(ДанныеДокумента.Период);
			СтрокаНачислений.ДатаОкончания = КонецМесяца(ДанныеДокумента.Период);
			СтрокаНачислений.ИдентификаторСтрокиВидаРасчета = ДокументРазовоеНачисление.Начисления.Индекс(СтрокаНачислений);
			СтрокаНачислений.ОбщийГрафик = ДанныеСотрудника[0].ГрафикРаботы;
			СтрокаНачислений.ПериодДействия = НачалоМесяца(ДанныеДокумента.Период);
			СтрокаНачислений.Подразделение = ДанныеСотрудника[0].Подразделение;
			СтрокаНачислений.Результат = СтрокаМассиваНачислений.СуммаОплаты;
			СтрокаНачислений.Сотрудник = Сотрудник;
			
		КонецЦикла;
		
		Если Объект.ПроводитьДокументы Тогда
			
			ДокументРазовоеНачисление.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе
			
			ДокументРазовоеНачисление.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // СоздатьИЗаполнитьДокументНаСервере()
#КонецОбласти

#Область НочныеВечерние


// <Описание процедуры>
//
// Параметры:
//  Соединение	 - 	 - 
//
&НаКлиенте
Процедура ПередатьДокументыНочныеВечерние(Соединение)
	
	Запрос = Соединение.NewObject(""Запрос"");
	ТекстЗапроса = ""ВЫБРАТЬ
	|	ЕСТЬNULL(ТабельНарядОтработанноеВремя.Ночные, 0) КАК Часы,
	|	ТабельНарядОтработанноеВремя.Ссылка.Сотрудник.Код КАК СотрудникКод,
	|	ТабельНарядОтработанноеВремя.Ссылка.Сотрудник.Представление,
	|	ТабельНарядОтработанноеВремя.Ссылка.Комментарий,
	|	ТабельНарядОтработанноеВремя.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	ТабельНарядОтработанноеВремя.Ставка,
	|	ЕСТЬNULL(ТабельНарядОтработанноеВремя.Ночные, 0) * ТабельНарядОтработанноеВремя.Ставка КАК Результат,
	|	""""Ночные"""" КАК ВидВремени
	|ИЗ
	|	Документ.ТабельНаряд.ОтработанноеВремя КАК ТабельНарядОтработанноеВремя
	|ГДЕ
	|	ТабельНарядОтработанноеВремя.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ТабельНарядОтработанноеВремя.Ссылка.Проведен = ИСТИНА
	|	И НЕ ЕСТЬNULL(ТабельНарядОтработанноеВремя.Ночные, 0) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТабельНарядОтработанноеВремя.Вечерние, 0),
	|	ТабельНарядОтработанноеВремя.Ссылка.Сотрудник.Код,
	|	ТабельНарядОтработанноеВремя.Ссылка.Сотрудник.Представление,
	|	ТабельНарядОтработанноеВремя.Ссылка.Комментарий,
	|	ТабельНарядОтработанноеВремя.Ссылка.ПериодРегистрации,
	|	ТабельНарядОтработанноеВремя.Ставка,
	|	ЕСТЬNULL(ТабельНарядОтработанноеВремя.Вечерние, 0) * ТабельНарядОтработанноеВремя.Ставка,
	|	""""Вечерние""""
	|ИЗ
	|	Документ.ТабельНаряд.ОтработанноеВремя КАК ТабельНарядОтработанноеВремя
	|ГДЕ
	|	ТабельНарядОтработанноеВремя.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ТабельНарядОтработанноеВремя.Ссылка.Проведен = ИСТИНА
	|	И НЕ ЕСТЬNULL(ТабельНарядОтработанноеВремя.Вечерние, 0) = 0
	|ИТОГИ
	|	СУММА(Часы),
	|	СУММА(Результат)
	|ПО
	|	ВидВремени,
	|	ПериодРегистрации,
	|	СотрудникКод"";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр(""ДатаНачала"", Объект.ДатаНачала);
	Запрос.УстановитьПараметр(""ДатаОкончания"", Объект.ДатаОкончания);
	
	Результат = Запрос.Выполнить();
	ВыборкаВидВремени = Результат.Выбрать(Соединение.ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивДанныхДляДокументов = Новый Массив;
	
	Пока ВыборкаВидВремени.Следующий() Цикл
		
		ВыборкаПериод = ВыборкаВидВремени.Выбрать(Соединение.ОбходРезультатаЗапроса.ПоГруппировкам);
						
		Пока ВыборкаПериод.Следующий() Цикл
			
			ВыборкаСотрудникКод = ВыборкаПериод.Выбрать(Соединение.ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ДанныеДокумента = Новый Структура;
			ДанныеДокумента.Вставить(""Период"", ВыборкаПериод.ПериодРегистрации);
			ДанныеДокумента.Вставить(""ВидВремени"", ВыборкаВидВремени.ВидВремени);
			
			МассивСтрок = Новый Массив;
			
			Пока ВыборкаСотрудникКод.Следующий() Цикл
				
				СтруктураСтроки = Новый Структура;
				
				СтруктураСтроки.Вставить(""СотрудникКод"", ВыборкаСотрудникКод.СотрудникКод);
				СтруктураСтроки.Вставить(""СуммаОплаты"", ВыборкаСотрудникКод.Результат);
				
				МассивСтрок.Добавить(СтруктураСтроки);
				
			КонецЦикла; 
			ДанныеДокумента.Вставить(""МассивНачислений"", МассивСтрок);
						
			МассивДанныхДляДокументов.Добавить(ДанныеДокумента);
		КонецЦикла;	
	КонецЦикла; 
	
	СоздатьИЗаполнитьДокументНочныеВечерниеНаСервере(МассивДанныхДляДокументов);
		
КонецПроцедуры // ПередатьДокументыРемонты()

// <Описание процедуры>
//
// Параметры:
//  ДанныеДляЗаполнения	 - 	 - 
//
&НаСервере
Процедура СоздатьИЗаполнитьДокументНочныеВечерниеНаСервере(ДанныеДляЗаполнения)
	
	Для каждого ДанныеДокумента Из ДанныеДляЗаполнения Цикл
		
		ДокументРазовоеНачисление = Документы.РазовоеНачисление.СоздатьДокумент();
		
		ДокументРазовоеНачисление.Дата = КонецМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ДатаНачала = НачалоМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ДатаОкончания = КонецМесяца(ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ДоначислитьЗарплатуПриНеобходимости = Ложь;
		
		ДокументРазовоеНачисление.МесяцНачисления = НачалоМесяца(ДанныеДокумента.Период);
		
		Если ДанныеДокумента.ВидВремени = ""Ночные"" Тогда
			
			ДокументРазовоеНачисление.Начисление = ПланыВидовРасчета.Начисления.НайтиПоКоду(""НОЧНв"");
			ДокументРазовоеНачисление.Комментарий = ""=== Документ создан автоматически. Оплата ночных часов суммой ==="";
		Иначе
			
			ДокументРазовоеНачисление.Начисление = ПланыВидовРасчета.Начисления.НайтиПоКоду(""ВЕЧР"");
			ДокументРазовоеНачисление.Комментарий = ""=== Документ создан автоматически. Оплата вечерних часов суммой ==="";
			
		КонецЕсли; 
		
		ДокументРазовоеНачисление.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		ДокументРазовоеНачисление.Ответственный = Пользователи.ТекущийПользователь();
		ДокументРазовоеНачисление.ПланируемаяДатаВыплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(ДокументРазовоеНачисление.Организация, ДанныеДокумента.Период);
		ДокументРазовоеНачисление.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		
		Для каждого СтрокаМассиваНачислений Из ДанныеДокумента.МассивНачислений Цикл
			
			СтрокаНачислений = ДокументРазовоеНачисление.Начисления.Добавить();
			Сотрудник = Справочники.Сотрудники.НайтиПоКоду(СтрокаМассиваНачислений.СотрудникКод);
			
			ДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, ""ГрафикРаботы, Подразделение"", КонецМесяца(ДанныеДокумента.Период));
			Если ДанныеСотрудника.Количество() = 0 Тогда
				
				ДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, ""ГрафикРаботы, Подразделение"", НачалоМесяца(ДанныеДокумента.Период));
				
				Если ДанныеСотрудника.Количество() = 0 Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(""Для сотрудника "" + 
					Сотрудник.Код + "" не удалось получить график работы и подразделение. Перезаполните сотрудника в документе"") ;
					ДанныеСотрудника.Добавить();		
				КонецЕсли; 
				
			КонецЕсли;
			
			СтрокаНачислений.ГрафикРаботы = ДанныеСотрудника[0].ГрафикРаботы;
			СтрокаНачислений.ГрафикРаботыНорма = ДанныеСотрудника[0].ГрафикРаботы;
			СтрокаНачислений.ДатаНачала = НачалоМесяца(ДанныеДокумента.Период);
			СтрокаНачислений.ДатаОкончания = КонецМесяца(ДанныеДокумента.Период);
			СтрокаНачислений.ИдентификаторСтрокиВидаРасчета = ДокументРазовоеНачисление.Начисления.Индекс(СтрокаНачислений);
			СтрокаНачислений.ОбщийГрафик = ДанныеСотрудника[0].ГрафикРаботы;
			СтрокаНачислений.ПериодДействия = НачалоМесяца(ДанныеДокумента.Период);
			СтрокаНачислений.Подразделение = ДанныеСотрудника[0].Подразделение;
			СтрокаНачислений.Результат = СтрокаМассиваНачислений.СуммаОплаты;
			СтрокаНачислений.Сотрудник = Сотрудник;
			
		КонецЦикла;
		
		Если Объект.ПроводитьДокументы Тогда
			
			ДокументРазовоеНачисление.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе
			
			ДокументРазовоеНачисление.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // СоздатьИЗаполнитьДокументНаСервере()
#КонецОбласти


#Область ВедомостьНаВыплатуЗП


// <Описание процедуры>
//
// Параметры:
//  Соединение	 - 	 - 
//
&НаКлиенте
Процедура ПередатьДокументыВедомостьНаВыплатуЗП(Соединение)
	
	Запрос = Соединение.NewObject(""Запрос"");
	ТекстЗапроса = ""ВЫБРАТЬ ПЕРВЫЕ 1
|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации,
|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата КАК ДатаДокумента,
|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.СпособВыплаты,
|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Комментарий,
|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПодразделениеОрганизации.Представление,
|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПодразделениеОрганизации.Код КАК ПодразделениеКод,
|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПроцентВыплаты,
|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.СуммаДокумента,
|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.НДФЛНачислен,
|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.Код КАК ФизлицоКод,
|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.Представление,
|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма,
|	ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты,
|	ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты,
|	ЗарплатаКВыплатеОрганизацийЗарплата.Авторасчет,
|	ЗарплатаКВыплатеОрганизацийЗарплата.Начислено,
|	ЗарплатаКВыплатеОрганизацийЗарплата.Удержано,
|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Банк.Наименование КАК БанкНаименование
|ИЗ
|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
|ГДЕ
|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Проведен = ИСТИНА
|	И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
|	И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
|	И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.СпособВыплаты = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыВыплатыЗарплаты.ЧерезБанк)
|ИТОГИ ПО
|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка"";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр(""ДатаНачала"", Объект.ДатаНачала);
	Запрос.УстановитьПараметр(""ДатаОкончания"", Объект.ДатаОкончания);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаСсылка = Результат.Выбрать(Соединение.ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивДанныхДляДокументов = Новый Массив;
	
	Пока ВыборкаСсылка.Следующий() Цикл
		
		ДанныеДокумента = Новый Структура;
		//ДанныеДокумента.Вставить(""СпособВыплаты"", ВыборкаСсылка.СпособВыплаты);
		ДанныеДокумента.Вставить(""ПериодРегистрации"", ВыборкаСсылка.ПериодРегистрации);
		ДанныеДокумента.Вставить(""Подразделение"", ВыборкаСсылка.ПодразделениеКод);
		ДанныеДокумента.Вставить(""БанкНаименование"", ВыборкаСсылка.БанкНаименование);
		ДанныеДокумента.Вставить(""ПроцентВыплаты"", ВыборкаСсылка.ПроцентВыплаты);
		ДанныеДокумента.Вставить(""СуммаПоДокументу"", ВыборкаСсылка.СуммаДокумента);
		ДанныеДокумента.Вставить(""Комментарий"", ВыборкаСсылка.Комментарий);
		ДанныеДокумента.Вставить(""ДатаДокумента"", ВыборкаСсылка.ДатаДокумента);
		
		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
		
		МассивСтрок = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтруктураСтроки = Новый Структура;
			
			СтруктураСтроки.Вставить(""ФизлицоКод"", ВыборкаДетальныеЗаписи.ФизлицоКод);
			СтруктураСтроки.Вставить(""Начислено"", ВыборкаДетальныеЗаписи.Начислено);
			
			МассивСтрок.Добавить(СтруктураСтроки);
			
		КонецЦикла; 
		ДанныеДокумента.Вставить(""Состав"", МассивСтрок);
		
		МассивДанныхДляДокументов.Добавить(ДанныеДокумента);
	КонецЦикла; 
	
	СоздатьИЗаполнитьДокументВедомостьНаСервере(МассивДанныхДляДокументов);
	
	
КонецПроцедуры // ПередатьДокументыВедомостьНаВыплатуЗП()

// <Описание процедуры>
//
// Параметры:
//  ДанныеДляЗаполнения	 - 	 - 
//
&НаСервере
Процедура СоздатьИЗаполнитьДокументВедомостьНаСервере(ДанныеДляЗаполнения)
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	ЗППроектСБ = Справочники.ЗарплатныеПроекты.НайтиПоНаименованию(""ДАЛЬНЕВОСТОЧНЫЙ БАНК ОАО """"СБЕРБАНК РОССИИ"""""", Истина);
	ЗППроектВТБ = Справочники.ЗарплатныеПроекты.НайтиПоНаименованию(""Банк ВТБ24"", Истина);
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	Для каждого ДанныеДокумента Из ДанныеДляЗаполнения Цикл
		
		ДанныеЗаполнения = ВзаиморасчетыССотрудниками.ДанныеЗаполненияВедомости();
		//ТОДО
		
		ВедомостьВБанк = Документы.ВедомостьНаВыплатуЗарплатыВБанк.СоздатьДокумент();
		
		ЗаполнитьЗначенияСвойств(ВедомостьВБанк, ДанныеДокумента);
		
		ВедомостьВБанк.Дата = ДанныеДокумента.ДатаДокумента;
		ВедомостьВБанк.Организация = Организация;
		ВедомостьВБанк.Подразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(ДанныеДокумента.Подразделение);
		
		ВедомостьВБанк.СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.Зарплата;
		
		Если СтрНайти(ДанныеДокумента.БанкНаименование, ""СБЕРБАНК"") > 0 Тогда
		
			ВедомостьВБанк.ЗарплатныйПроект = ЗППроектСБ;
			
		Иначе
			
			ВедомостьВБанк.ЗарплатныйПроект = ЗППроектВТБ;
		
		КонецЕсли; 
		
		ВедомостьВБанк.Ответственный = ТекПользователь;
		ВедомостьВБанк.ВыплатаЗарплатыВыполнена = Истина;
		ВедомостьВБанк.ДатаВыплаты = ДанныеДокумента.ДатаДокумента;
		        
		ТЗСостав = Новый ТаблицаЗначений;
		ТЗСостав.Колонки.Добавить(""ФизическоеЛицо"", Новый ОписаниеТипов(""СправочникСсылка.ФизическиеЛица""));
		ТЗСостав.Колонки.Добавить(""Сумма"", Новый ОписаниеТипов(""Число""));
		
		Для каждого СтрокиСостава Из ДанныеДокумента.Состав Цикл
		
			СтрокаТЗ = ТЗСостав.Добавить();
			СтрокатЗ.ФизическоеЛицо = Справочники.ФизическиеЛица.НайтиПоКоду(СтрокиСостава.ФизлицоКод);
			СтрокаТЗ.Сумма = СтрокиСостава.Начислено;
		
		КонецЦикла; 
		
		ВедомостьВБанк.ЗаполнитьЗарплату();
		
		
		Если ТЗСостав.Количество() > 0 Тогда
		
			ВедомостьВБанк.УстановитьЗарплатуРаботников(ТЗСостав);
		
		КонецЕсли; 
		
		Если Объект.ПроводитьДокументы Тогда
			
			ВедомостьВБанк.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе
			
			ВедомостьВБанк.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // СоздатьИЗаполнитьДокументНаСервере()
#КонецОбласти


// <Описание функции>
//
// Параметры:
//  СтрокаСоединения - Строка	 - 
//  Логин			 - Строка	 - 
//  Пароль			 - Строка	 - 
// 
// Возвращаемое значение:
//   - <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ПолучитьСоединение(СтрокаСоединения, Логин, Пароль)
	
	Коннектор = Новый COMОбъект(""V83.COMConnector"");
	
	ПараметрыСоединения = СтрокаСоединения + ""Usr="" + Логин + "";"" + ""Pwd="" + Пароль + "";"";
	
	Попытка
		
		Соединение = Коннектор.Connect(ПараметрыСоединения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ТекущаяДата()) + "" Соединение успешно установлено"");
		Возврат Соединение;
		
	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(""Ошибка создания соединения! "" + ОписаниеОшибки());
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции // ПолучитьСоединение()

",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",720ba5cc-229f-475d-b22d-69c88d895d1f}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,17,
{1,
{0,0b5bc5cb-999d-4fe8-b441-feeec0fe9135}
},
{1,
{0,18b2af5e-2ba2-4d03-ad1c-7076d2cf4864}
},
{1,
{0,20e8b68b-c989-40aa-92c6-f4a37903209d}
},
{1,
{0,25439999-11d1-41d9-9bb7-bea1d341b2cc}
},
{1,
{0,2adc0579-0f62-403b-b056-d4bae6d8ab8d}
},
{1,
{0,2ed158e6-8dfd-444c-bf53-126a556fd514}
},
{1,
{0,554ce3cf-b88f-4d7c-88bb-3e11f067f5c1}
},
{1,
{0,6c00eea1-8adf-474b-9f3e-15f4fc9eb078}
},
{1,
{0,8b8299ac-78bf-4081-8c48-68ee5180d108}
},
{1,
{0,903068d6-138b-4c8f-93e3-36108f616e66}
},
{1,
{0,a71d6f47-1cb6-489a-b4ed-0dc8bf54676d}
},
{1,
{0,bc6a3c26-8220-49e9-aa2b-7a8b4a567392}
},
{1,
{0,c173080a-5acf-44c8-8a6f-cf4b014c9555}
},
{1,
{0,d70b50f6-21c0-47eb-8803-3c8daca72564}
},
{1,
{0,e261be8b-33a6-45a9-ad1c-1573fcc782d6}
},
{1,
{0,e747bb8a-aff3-4c2b-9b2c-89336b153775}
},
{1,
{0,fe6aa399-c0bb-4a37-8074-dd856fdf1c03}
}
},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,1,
{8,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Передать",
{1,1,
{"ru","Передать"}
},
{1,1,
{"ru","Передать"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"Передать",3,0,0,
{0,0},1,0,1,0,0}
},
{0,0},
{0,0},0,0}